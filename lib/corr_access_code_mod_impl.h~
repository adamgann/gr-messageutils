/* -*- c++ -*- */
/* 
 * Copyright 2014 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifndef INCLUDED_MESSAGEUTILS_CORR_ACCESS_CODE_MOD_IMPL_H
#define INCLUDED_MESSAGEUTILS_CORR_ACCESS_CODE_MOD_IMPL_H

#include <messageutils/corr_access_code_mod.h>

namespace gr {
  namespace messageutils {

    class corr_access_code_mod_impl : public corr_access_code_mod
    {
     private:
      unsigned long long d_access_code;	// access code to locate start of packet
                                        //   access code is left justified in the word
      unsigned long long d_data_reg;	// used to look for access_code
      unsigned long long d_flag_reg;	// keep track of decisions
      unsigned long long d_flag_bit;	// mask containing 1 bit which is location of new flag
      unsigned long long d_mask;	// masks access_code bits (top N bits are set where
                                        //   N is the number of bits in the access code)
      unsigned int d_threshold; 	// how many bits may be wrong in sync vector

      bool d_debug;

      const std::string d_default_access_code = 

    protected:
      unsigned int count_bits32(unsigned int x)
      {
        unsigned res = (x & 0x55555555) + ((x >> 1) & 0x55555555);
        res = (res & 0x33333333) + ((res >> 2) & 0x33333333);
        res = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);
        res = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);
        return (res & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);
      }

    unsigned int count_bits64(unsigned long long x)
    {
        return count_bits32((x >> 32) & 0xffffffff) + \
        count_bits32(x & 0xffffffff);
    }

     public:
      corr_access_code_mod_impl(const std::string &access_code, int threshold, bool debug);
      ~corr_access_code_mod_impl();

      // Where all the action really happens
      int work(int noutput_items,
	       gr_vector_const_void_star &input_items,
	       gr_vector_void_star &output_items);

      bool set_access_code(const std::string &access_code);
    };

  } // namespace messageutils
} // namespace gr

#endif /* INCLUDED_MESSAGEUTILS_CORR_ACCESS_CODE_MOD_IMPL_H */

